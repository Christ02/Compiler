
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.Symbol;
import scanner.Scanner;
import java.io.FileReader;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\007\000\002\004\011" +
    "\000\002\004\007\000\002\004\013\000\002\004\003\000" +
    "\002\004\006\000\002\004\005\000\002\004\005\000\002" +
    "\007\005\000\002\007\007\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\026\021\007\025\015\027\006\030\011\031" +
    "\005\032\021\033\013\034\020\040\014\041\017\001\002" +
    "\000\004\041\113\001\002\000\004\041\uffe2\001\002\000" +
    "\004\017\107\001\002\000\026\021\007\025\015\027\006" +
    "\030\011\031\005\032\021\033\013\034\020\040\014\041" +
    "\017\001\002\000\004\002\104\001\002\000\004\017\074" +
    "\001\002\000\030\002\000\021\007\025\015\027\006\030" +
    "\011\031\005\032\021\033\013\034\020\040\014\041\017" +
    "\001\002\000\004\041\uffe0\001\002\000\004\041\uffdf\001" +
    "\002\000\004\017\065\001\002\000\032\002\uffff\021\uffff" +
    "\022\uffff\025\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033" +
    "\uffff\034\uffff\040\uffff\041\uffff\001\002\000\004\010\062" +
    "\001\002\000\020\017\032\035\024\036\027\041\030\042" +
    "\023\043\026\044\031\001\002\000\004\041\uffe1\001\002" +
    "\000\034\002\ufff9\021\ufff9\022\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\040\ufff9" +
    "\041\ufff9\001\002\000\032\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\020\uffe7\023\uffe7\001\002\000\032\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\020\uffe4\023\uffe4\001\002\000\030\004\041\005" +
    "\034\006\037\007\036\011\035\012\042\013\040\014\045" +
    "\015\044\016\046\023\061\001\002\000\032\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\020\uffe6\023\uffe6\001\002\000\032\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\020\uffe3\023\uffe3\001\002\000" +
    "\032\004\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\023\uffe8\001" +
    "\002\000\032\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\023" +
    "\uffe5\001\002\000\020\017\032\035\024\036\027\041\030" +
    "\042\023\043\026\044\031\001\002\000\030\004\041\005" +
    "\034\006\037\007\036\011\035\012\042\013\040\014\045" +
    "\015\044\016\046\020\043\001\002\000\020\017\032\035" +
    "\024\036\027\041\030\042\023\043\026\044\031\001\002" +
    "\000\020\017\032\035\024\036\027\041\030\042\023\043" +
    "\026\044\031\001\002\000\020\017\032\035\024\036\027" +
    "\041\030\042\023\043\026\044\031\001\002\000\020\017" +
    "\032\035\024\036\027\041\030\042\023\043\026\044\031" +
    "\001\002\000\020\017\032\035\024\036\027\041\030\042" +
    "\023\043\026\044\031\001\002\000\020\017\032\035\024" +
    "\036\027\041\030\042\023\043\026\044\031\001\002\000" +
    "\020\017\032\035\024\036\027\041\030\042\023\043\026" +
    "\044\031\001\002\000\032\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\020\uffe9\023\uffe9\001\002\000\020\017\032\035\024\036" +
    "\027\041\030\042\023\043\026\044\031\001\002\000\020" +
    "\017\032\035\024\036\027\041\030\042\023\043\026\044" +
    "\031\001\002\000\020\017\032\035\024\036\027\041\030" +
    "\042\023\043\026\044\031\001\002\000\032\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\020\uffea\023\uffea\001\002\000\032\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\011\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\020\uffec\023\uffec\001\002\000" +
    "\032\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb\023\uffeb\001" +
    "\002\000\032\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\020\uffee\023" +
    "\uffee\001\002\000\032\004\ufff3\005\ufff3\006\037\007\036" +
    "\011\035\012\042\013\040\014\045\015\044\016\046\020" +
    "\ufff3\023\ufff3\001\002\000\032\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\020\uffed\023\uffed\001\002\000\032\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\011\035\012\042\013\040\014\045\015" +
    "\044\016\046\020\ufff1\023\ufff1\001\002\000\032\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\011\035\012\042\013\040\014" +
    "\045\015\044\016\046\020\ufff0\023\ufff0\001\002\000\032" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\020\uffef\023\uffef\001\002" +
    "\000\032\004\ufff2\005\ufff2\006\037\007\036\011\035\012" +
    "\042\013\040\014\045\015\044\016\046\020\ufff2\023\ufff2" +
    "\001\002\000\034\002\ufff7\021\ufff7\022\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\040\ufff7\041\ufff7\001\002\000\020\017\032\035\024\036" +
    "\027\041\030\042\023\043\026\044\031\001\002\000\030" +
    "\004\041\005\034\006\037\007\036\011\035\012\042\013" +
    "\040\014\045\015\044\016\046\023\064\001\002\000\034" +
    "\002\ufff8\021\ufff8\022\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\040\ufff8\041\ufff8" +
    "\001\002\000\020\017\032\035\024\036\027\041\030\042" +
    "\023\043\026\044\031\001\002\000\030\004\041\005\034" +
    "\006\037\007\036\011\035\012\042\013\040\014\045\015" +
    "\044\016\046\020\067\001\002\000\026\021\007\025\015" +
    "\027\006\030\011\031\005\032\021\033\013\034\020\040" +
    "\014\041\017\001\002\000\034\002\ufffd\021\ufffd\022\ufffd" +
    "\025\ufffd\026\071\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\040\ufffd\041\ufffd\001\002\000\026\021\007" +
    "\025\015\027\006\030\011\031\005\032\021\033\013\034" +
    "\020\040\014\041\017\001\002\000\034\002\ufffc\021\ufffc" +
    "\022\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\040\ufffc\041\ufffc\001\002\000\032" +
    "\002\ufffe\021\ufffe\022\ufffe\025\ufffe\027\ufffe\030\ufffe\031" +
    "\ufffe\032\ufffe\033\ufffe\034\ufffe\040\ufffe\041\ufffe\001\002" +
    "\000\020\017\032\035\024\036\027\041\030\042\023\043" +
    "\026\044\031\001\002\000\030\004\041\005\034\006\037" +
    "\007\036\011\035\012\042\013\040\014\045\015\044\016" +
    "\046\023\076\001\002\000\020\017\032\035\024\036\027" +
    "\041\030\042\023\043\026\044\031\001\002\000\030\004" +
    "\041\005\034\006\037\007\036\011\035\012\042\013\040" +
    "\014\045\015\044\016\046\023\100\001\002\000\020\017" +
    "\032\035\024\036\027\041\030\042\023\043\026\044\031" +
    "\001\002\000\030\004\041\005\034\006\037\007\036\011" +
    "\035\012\042\013\040\014\045\015\044\016\046\020\102" +
    "\001\002\000\026\021\007\025\015\027\006\030\011\031" +
    "\005\032\021\033\013\034\020\040\014\041\017\001\002" +
    "\000\034\002\ufffa\021\ufffa\022\ufffa\025\ufffa\026\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\040\ufffa" +
    "\041\ufffa\001\002\000\004\002\001\001\002\000\030\021" +
    "\007\022\106\025\015\027\006\030\011\031\005\032\021" +
    "\033\013\034\020\040\014\041\017\001\002\000\034\002" +
    "\ufff6\021\ufff6\022\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\040\ufff6\041\ufff6\001" +
    "\002\000\020\017\032\035\024\036\027\041\030\042\023" +
    "\043\026\044\031\001\002\000\030\004\041\005\034\006" +
    "\037\007\036\011\035\012\042\013\040\014\045\015\044" +
    "\016\046\020\111\001\002\000\026\021\007\025\015\027" +
    "\006\030\011\031\005\032\021\033\013\034\020\040\014" +
    "\041\017\001\002\000\034\002\ufffb\021\ufffb\022\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\040\ufffb\041\ufffb\001\002\000\006\010\115\023" +
    "\114\001\002\000\034\002\ufff5\021\ufff5\022\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\040\ufff5\041\ufff5\001\002\000\020\017\032\035\024" +
    "\036\027\041\030\042\023\043\026\044\031\001\002\000" +
    "\030\004\041\005\034\006\037\007\036\011\035\012\042" +
    "\013\040\014\045\015\044\016\046\023\117\001\002\000" +
    "\034\002\ufff4\021\ufff4\022\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\040\ufff4\041" +
    "\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\014\002\007\003\011\004\015\006\003\007" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\104\004\015\006\003\007\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\072" +
    "\006\003\007\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\032\001\001\000\002\001\001" +
    "\000\004\005\057\001\001\000\004\005\056\001\001\000" +
    "\004\005\055\001\001\000\004\005\054\001\001\000\004" +
    "\005\053\001\001\000\004\005\052\001\001\000\004\005" +
    "\051\001\001\000\002\001\001\000\004\005\050\001\001" +
    "\000\004\005\047\001\001\000\004\005\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\065\001\001\000\002" +
    "\001\001\000\010\004\067\006\003\007\021\001\001\000" +
    "\002\001\001\000\010\004\071\006\003\007\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\074\001" +
    "\001\000\002\001\001\000\004\005\076\001\001\000\002" +
    "\001\001\000\004\005\100\001\001\000\002\001\001\000" +
    "\010\004\102\006\003\007\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\072\006\003\007\021\001" +
    "\001\000\002\001\001\000\004\005\107\001\001\000\002" +
    "\001\001\000\010\004\111\006\003\007\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\115\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Scanner scanner;

    // Constructor para inicializar el scanner
    public Parser(Scanner scanner) {
        super();
        this.scanner = scanner;
    }

    // Método para leer un archivo de entrada y ejecutar el parser
    public Symbol parse(String filename) throws Exception {
        try {
            scanner = new Scanner(new FileReader(filename));
            return this.parse();
        } catch (IOException e) {
            throw new RuntimeException("Error al leer el archivo: " + e.getMessage());
        }
    }

    // Método scan que conecta el scanner al parser
    @Override
    public Symbol scan() throws Exception {
        return scanner.next_token();
    }

    // Método para manejar errores de sintaxis
    public void syntax_error(Symbol s) {
        String tokenName = sym.terminalNames[s.sym];
        String tokenValue = s.value == null ? "" : s.value.toString();
        String errorMessage = String.format(
            "Error Sintáctico en la Línea %d, Columna %d: Token '%s' no reconocido. Tipo: %s",
            s.right + 1, s.left + 1, tokenValue, tokenName
        );

        // Imprimir el error en la consola
        System.err.println(errorMessage);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= StatementList 
            {
              Object RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = statements; System.out.println("Parsed program"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Statement ::= IF LPAREN Expression RPAREN Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statement ::= FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statement ::= VariableDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= IDENTIFIER EQUALS Expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= RETURN Expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VariableDeclaration ::= Type IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VariableDeclaration ::= Type IDENTIFIER EQUALS Expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expression ::= Expression PLUS Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expression ::= Expression MINUS Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expression ::= Expression MULTIPLY Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expression ::= Expression DIVIDE Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expression ::= Expression EQUALS_EQUALS Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= Expression NOT_EQUALS Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= Expression LESS_THAN Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= Expression LESS_THAN_EQUALS Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expression ::= Expression GREATER_THAN Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expression ::= Expression GREATER_THAN_EQUALS Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expression ::= LPAREN Expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expression ::= INTLIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expression ::= FLOATLIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expression ::= STRINGLIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
