import java_cup.runtime.Symbol;

parser code {:
    // Código que será incluido en el parser generado
    public class ParserActions {
        public void syntax_error(Symbol s) {
            System.err.println("Error de sintaxis en la línea " + s.left + ", columna " + s.right + ": " + s.value);
        }
    }
:};

action code {:
    // Código que se ejecuta durante la acción de parsing
:};

terminal PLUS, MINUS, MULTIPLY, DIVIDE;
terminal EQUALS, EQUALS_EQUALS, NOT_EQUALS, LESS_THAN, LESS_THAN_EQUALS, GREATER_THAN, GREATER_THAN_EQUALS;
terminal LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON, COMMA;
terminal IF, ELSE, WHILE, FOR, INT, FLOAT, BOOLEAN, RETURN, TRUE, FALSE, PUBLIC, VOID;
terminal IDENTIFIER, INTLIT, FLOATLIT, STRINGLIT;

non terminal Program;
non terminal StatementList;
non terminal Statement;
non terminal Expression;
non terminal Type;
non terminal VariableDeclaration;

precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE;
precedence left EQUALS_EQUALS, NOT_EQUALS, LESS_THAN, LESS_THAN_EQUALS, GREATER_THAN, GREATER_THAN_EQUALS;
precedence nonassoc ELSE;  // Precedencia no asociativa para evitar el conflicto con else

start with Program;

Program ::= StatementList:statements
          {: System.out.println("Parsed program"); :}
          ;

StatementList ::= Statement
                | StatementList Statement
                ;

Statement ::= IF LPAREN Expression RPAREN Statement
            | IF LPAREN Expression RPAREN Statement ELSE Statement
            | WHILE LPAREN Expression RPAREN Statement
            | FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement
            | VariableDeclaration
            | IDENTIFIER EQUALS Expression SEMICOLON
            | RETURN Expression SEMICOLON
            | LBRACE StatementList RBRACE
            ;

VariableDeclaration ::= Type IDENTIFIER SEMICOLON
                      | Type IDENTIFIER EQUALS Expression SEMICOLON
                      ;

Expression ::= Expression PLUS Expression
             | Expression MINUS Expression
             | Expression MULTIPLY Expression
             | Expression DIVIDE Expression
             | Expression EQUALS_EQUALS Expression
             | Expression NOT_EQUALS Expression
             | Expression LESS_THAN Expression
             | Expression LESS_THAN_EQUALS Expression
             | Expression GREATER_THAN Expression
             | Expression GREATER_THAN_EQUALS Expression
             | LPAREN Expression RPAREN
             | IDENTIFIER
             | INTLIT
             | FLOATLIT
             | STRINGLIT
             | TRUE
             | FALSE
             ;

Type ::= INT
       | FLOAT
       | BOOLEAN
       | VOID
       ;
